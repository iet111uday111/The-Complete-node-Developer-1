WEBVTT

00:00.600 --> 00:06.750
Welcome back to part two on Noad debugging as a quick reminder you do need Noad or version 8 in order

00:06.750 --> 00:08.600
to go through this video successfully.

00:08.700 --> 00:12.300
And for this one you're also going to need chrome install because we're going to be using the chrome

00:12.330 --> 00:16.450
developer tools to go through the same process we went through in the last video.

00:16.590 --> 00:19.890
Now we actually don't need to make any changes to our code.

00:20.010 --> 00:25.800
Things like debugger those also work when we're debugging from the dev tools exactly like they work

00:25.850 --> 00:28.190
when we're going from the command line.

00:28.320 --> 00:32.070
So we can kick things off right away by running a brand new command from the terminal.

00:32.070 --> 00:39.390
Now Previously we used node inspect that allowed us to debug via the command line when we want to debug

00:39.460 --> 00:43.050
via the chrome developer tools we use node with a flag.

00:43.050 --> 00:50.220
It is the inspect hyphen be r.k flag this tells node that we want to run in inspect mode but we don't

00:50.220 --> 00:52.340
actually want to connect via that command line.

00:52.350 --> 00:57.090
So we don't want to see all that output and we don't want to issue commands like an OR c.

00:57.240 --> 01:01.300
We also want a break before that first line just like we did last time from here.

01:01.350 --> 01:03.230
We're going to type the things that you'd expect.

01:03.240 --> 01:05.370
We're just going to reference the file we want to run.

01:05.370 --> 01:08.850
Playground forward slash debugging dot J.

01:08.850 --> 01:09.450
S..

01:09.570 --> 01:13.530
I'm going to run this and you're going to notice that we only get two lines in this time and these are

01:13.530 --> 01:18.990
the exact same first two lines we got in the last video the first one is letting us know that the debugger

01:18.990 --> 01:20.180
is up and running.

01:20.250 --> 01:22.960
And the second one is letting us know where we can learn more.

01:23.040 --> 01:24.480
But that third line is gone.

01:24.480 --> 01:29.670
If you remember that third line told you you successfully connected followed by a bunch of output.

01:29.670 --> 01:31.830
We're not getting that here because we haven't connected yet.

01:31.830 --> 01:34.670
We're going to connect via Chrome to do that.

01:34.680 --> 01:41.280
We're going to head over to the Chrome browser and we're going to go to Chrome Colan forward slash forward

01:41.280 --> 01:43.120
slash inspect.

01:43.130 --> 01:48.440
Now this chrome protocol is where you can find all of those chrome pages so I could go to Chrome Kolin

01:48.440 --> 01:51.660
thoughts flash forward slash version for example.

01:51.660 --> 01:54.300
That'll bring me to the version page you can go to the settings page.

01:54.300 --> 01:55.450
There's a whole bunch of them.

01:55.530 --> 01:57.510
We just need the inspect page.

01:57.510 --> 02:01.380
Now on this page you should be seeing what I see here and a remote target.

02:01.440 --> 02:02.370
You should have one.

02:02.400 --> 02:06.180
Here is my note version as well as the file that's currently running.

02:06.210 --> 02:09.900
Now there's an inspect button below this but you don't want to click that we actually want to go to

02:09.900 --> 02:13.750
the open dedicated dev tools for node link.

02:13.770 --> 02:18.930
Now if you're not seeing the remote target showing up that is OK we're just going to need to work through

02:18.930 --> 02:24.750
some configuration together these tools are still new and there are still a few edge cases depending

02:24.750 --> 02:30.270
on what operating system you're on and whether or not you have things like VPN or firewall settings.

02:30.270 --> 02:35.310
If you're not seeing this just open up a question in the Q&amp;A and I promise we'll get to the bottom of

02:35.310 --> 02:35.420
it.

02:35.430 --> 02:39.540
If you are then you can click this button and it's going to bring us right into the dev tools and what

02:39.540 --> 02:40.330
do we see here.

02:40.440 --> 02:44.070
We see the exact same file we saw in the last video.

02:44.100 --> 02:48.210
We have a wrapper function we have all of the code we wrote and we also have a whole bunch of other

02:48.210 --> 02:49.010
stuff.

02:49.110 --> 02:53.940
Now when it comes to the bugging with Node the only tab we're going to focus on is this source's tab

02:54.240 --> 02:59.370
the counsel tab is also useful but you can actually open up the console on the sources tab using the

02:59.370 --> 03:00.290
escape key.

03:00.330 --> 03:04.570
That's going to allow you to hide and show it and the console is similar to our EPL.

03:04.590 --> 03:08.680
Or we can run javascript like one plus four for here we get five.

03:08.820 --> 03:09.520
Awesome.

03:09.780 --> 03:13.120
Now on the left hand side we have a sources treeview.

03:13.290 --> 03:18.050
Under no domain we have a bunch of files that aren't part of our application under File.

03:18.060 --> 03:23.180
We have some files that are in this case just one debugging dodgiest which happens to already be open.

03:23.430 --> 03:25.770
Now what we can do is go ahead and actually run through the app.

03:25.770 --> 03:30.940
So at this point once again we have paused before our app code has executed.

03:30.960 --> 03:34.750
So if I try to type person down below we're going to get undefined.

03:34.890 --> 03:38.060
We can go ahead and run the program though using this big blue button.

03:38.070 --> 03:43.380
You can also note the keyboard shortcut there if you want to use that later when we click the blue button.

03:43.410 --> 03:48.030
We're doing exactly what C did in the command line to bugger.

03:48.120 --> 03:53.040
It is going to continue until the program ends or until we hit one of our break points.

03:53.040 --> 03:56.710
We do have a break point let's click that blue button and see what happens right here.

03:56.760 --> 03:58.890
We stop on line 7.

03:58.920 --> 04:03.510
Now not only are we stopping on line 7 but we're getting some pretty cool output up above we can see

04:03.510 --> 04:08.170
over here we have some information about the arguments that got passed in down below.

04:08.190 --> 04:10.720
We have some information about what person looks like.

04:10.800 --> 04:13.370
So it's giving us a sneak peek into that data.

04:13.500 --> 04:18.660
So if I wanted to know what person equaled at this point in time I could run a person down below to

04:18.660 --> 04:22.920
get those properties back or I could just view it right here in line.

04:22.920 --> 04:27.620
Now we can go ahead and continue on through the program and there we are we are done.

04:27.690 --> 04:30.120
Now there's no need to close this window.

04:30.120 --> 04:35.810
We can actually leave this one open and the next time we run one of our node apps in debug mode for

04:35.820 --> 04:39.160
the dev tools it will automatically refresh this guy.

04:39.180 --> 04:42.860
So let's go ahead and do that over inside of the terminal.

04:42.900 --> 04:45.030
I'm going to shut things down.

04:45.060 --> 04:47.110
We're going to reload the last command.

04:47.190 --> 04:55.060
But we're going to swap out node for node Mon so Nordman can also be called with the inspector Bjarke

04:55.320 --> 05:00.170
flag that's going to do exactly what you might expect it's going to restart the debugger every time

05:00.170 --> 05:01.320
you change your file.

05:01.380 --> 05:06.180
Up above we would not have had that same effect we would have had to shut things down and restart them

05:06.360 --> 05:07.910
every time we change a file.

05:08.130 --> 05:12.120
But when we do run this with gnomon we're going to notice that right away we're brought inside of the

05:12.120 --> 05:16.380
debugger we're paused on the very first line and we can go ahead and continue through the program I

05:16.380 --> 05:18.810
can click blue to get to our break point.

05:18.840 --> 05:25.140
Now aside from creating breakpoints with debugger in the dev tools you can actually click the line number

05:25.260 --> 05:28.090
to automatically create a breakpoint on the fly.

05:28.230 --> 05:33.870
So right now I have a breakpoint on line five and line 11 now line 5 has come and gone to that one is

05:33.870 --> 05:35.010
not going to get caught.

05:35.100 --> 05:36.930
But we haven't got into line 11 yet.

05:36.960 --> 05:41.160
So if I click that blue button you can see that instead of continuing all the way through the end and

05:41.160 --> 05:45.960
printing out the object we actually have stopped just before we print out the object.

05:45.960 --> 05:51.870
If I look at person I can see that the person is indeed Mike and if I click that blue play button once

05:51.870 --> 05:53.870
again it prints to the screen.

05:53.880 --> 05:57.450
Now there are still a few weird quirks you'll notice that it printed out four times.

05:57.450 --> 06:00.190
There are things that are being worked through in the dev tools.

06:00.330 --> 06:04.010
Hopefully we're going to get some of these get have issues cleaned up really soon here.

06:04.200 --> 06:09.210
Now that we have all of this in place we can switch back over to Adam and make a change.

06:09.210 --> 06:12.510
For example I could change this to 26.

06:12.510 --> 06:18.690
Save the file and head back into the dev tools right away we are running the new version of the application.

06:18.690 --> 06:23.550
I can continue through the program use the new code and make sure it's working as expected.

06:23.730 --> 06:28.180
So when I do my no debugging I'm almost always doing it from the chrome developer tools.

06:28.200 --> 06:31.640
It is very useful to know that the command line tools exist.

06:31.770 --> 06:36.750
If you are on a server where you don't have access to things like installing chrome it is an essential

06:36.840 --> 06:38.180
tool in your tool belt.

06:38.250 --> 06:43.470
But for you right now going through this course I always recommend just using the chrome dev tools.

06:43.470 --> 06:46.360
Now that we have this in place we can head back into ADOM.

06:46.380 --> 06:51.660
I'm going to revert that change and we can move on to your challenge which is once again going to be

06:51.660 --> 06:56.180
running the notes application and stopping at that breakpoint.

06:56.430 --> 07:00.300
I can shut things down over inside of the terminal and clear the output.

07:00.360 --> 07:02.840
Now as I mentioned before we can just leave this window open.

07:02.850 --> 07:08.760
There's no need to go to the Crome inspect you RL and reconnect every single time it'll automatically

07:08.820 --> 07:09.480
reconnect.

07:09.480 --> 07:13.450
For us we're going to go back into Adam and open up notes.

07:13.510 --> 07:13.850
J.

07:13.850 --> 07:15.020
S So right here.

07:15.020 --> 07:20.880
Remember you added that debugger and you ran the application with the read command and a title argument.

07:20.880 --> 07:24.000
You're going to do the exact same thing just pick a different note.

07:24.090 --> 07:26.400
So I'm going to go ahead and use this one right here.

07:26.400 --> 07:27.600
Things to do.

07:27.600 --> 07:30.680
That's the note that I'll be searching for when I go through this challenge.

07:30.690 --> 07:32.700
Pick a note on your own.

07:32.700 --> 07:36.360
Then run the application with the new flag.

07:36.360 --> 07:40.960
We just explored get to this point in the chrome developer tools.

07:40.980 --> 07:44.160
Print out no and ensure that it looks correct.

07:44.280 --> 07:50.600
Once you're done you can go ahead and click play all right how that one go hopefully you were able to

07:50.600 --> 07:52.550
get that done without too much trouble.

07:52.550 --> 07:54.820
We're going to go ahead and knock things out.

07:54.830 --> 07:58.630
First off by running the command no need for a code change.

07:58.700 --> 08:02.880
I'm going to run node man though node would work as well.

08:03.170 --> 08:10.970
Inspect hyphen be r.k then the applications are apt at Jap's we want to use the read command and we

08:10.970 --> 08:13.770
want to read a note with a specific title.

08:13.880 --> 08:19.220
In our case I picked one I believe it was called things to do us.

08:19.490 --> 08:23.420
Now at this point we're brought over into the Croman developer tools and you can see that there is a

08:23.420 --> 08:27.170
ton of application code inside a file.

08:27.290 --> 08:32.980
We now have apparat J S and if I click play you can see that the other files come into play as they're

08:32.990 --> 08:33.860
used.

08:33.860 --> 08:35.480
Now we have notes.

08:35.550 --> 08:40.940
J.S. we're stopped at that point where we put our debugger and we can actually see that the object is

08:40.940 --> 08:43.070
correct by looking at this little in line.

08:43.070 --> 08:46.070
Note that the chrome dev tools has at it for us.

08:46.070 --> 08:49.590
We could also go ahead and just type note down below.

08:49.670 --> 08:53.870
And we are indeed getting quite a few copies of that so we're going to work on fixing that one.

08:54.080 --> 08:55.550
Hopefully the do good effects.

08:55.550 --> 08:59.420
For now though at least it's the same thing multiple times and it's still easy to figure out what's

08:59.420 --> 09:01.960
happening now that we've done that.

09:01.970 --> 09:05.060
We could always change something that wasn't part of the challenge but you could set.

09:05.060 --> 09:15.170
Note dot body equal to something else we can run that I can click play and when the program ends the

09:15.170 --> 09:18.970
new body value is indeed the one that is showing up.

09:18.980 --> 09:19.600
So there we have it.

09:19.610 --> 09:23.830
We don't have two tools we can use to debug our applications.

09:23.930 --> 09:26.600
We can use the command line interface if we must.

09:26.600 --> 09:33.080
And when we're debugging our applications what I suggest you do is you use the chrome developer tools

09:33.530 --> 09:37.220
if you ever forget how any of that works just come back and check these videos out.

09:37.220 --> 09:42.920
Debugging is one of those skills that is really really tedious and slow at first.

09:42.920 --> 09:47.900
It's going to take quite a bit of time before you really get comfortable with that flow but I promise

09:48.140 --> 09:53.540
that every issue you debug gets you moving a little bit faster and before you know it you're going to

09:53.540 --> 09:55.720
be moving through bugs really really quickly.

09:55.730 --> 09:58.880
I'm going to remove the debugger from notes that just save the file.

09:58.910 --> 10:00.140
That is it for this one.

10:00.140 --> 10:02.110
I will see you next time.
