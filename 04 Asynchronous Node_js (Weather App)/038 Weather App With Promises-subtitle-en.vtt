WEBVTT

00:00.450 --> 00:04.910
In this video you're going to learn how to use a library that has premises built in.

00:04.920 --> 00:09.990
We're going to explore the X-Post library which is really similar to request although instead of using

00:09.990 --> 00:13.050
callbacks like request does it uses promises.

00:13.140 --> 00:18.450
So we don't have to wrap our calls in promises to get that promise functionality we're actually going

00:18.450 --> 00:21.260
to be recreating the entire weather app in this video.

00:21.420 --> 00:23.980
We're only going to have to write about 25 lines of code.

00:24.000 --> 00:28.980
We'll go through the entire process taking the address getting the coordinates and then fetching the

00:28.980 --> 00:30.710
weather to do this.

00:30.810 --> 00:32.280
I'm going to duplicate apt.

00:32.350 --> 00:36.390
Yes because we do configure yards in here and we're going to want to carry over that code to the new

00:36.390 --> 00:37.130
project.

00:37.170 --> 00:39.800
There's no need to rewrite it right here.

00:39.810 --> 00:41.240
I'm going to duplicate app.

00:41.330 --> 00:45.620
J.S. giving it a new name app hyphen promise.

00:45.790 --> 00:46.900
Yes.

00:47.190 --> 00:51.500
Inside of here before we add anything let's go ahead and read some stuff out.

00:51.540 --> 00:56.160
I'm going to be ripping out the code and weather variable declarations we're not going to be requiring

00:56.160 --> 00:57.070
any files.

00:57.180 --> 01:02.220
Then I'm going to remove everything after our Yard's configuration which in this case is just our call

01:02.220 --> 01:04.280
to geocoder address.

01:04.290 --> 01:05.090
Excellent.

01:05.160 --> 01:10.260
Now that we have a clean slate we can go ahead and get started by installing the new library before

01:10.260 --> 01:11.790
we run the NPM install command.

01:11.790 --> 01:14.220
I want to show you where you can find the documentation.

01:14.340 --> 01:24.240
You can get it by googling NPM x x x i o s right here we have the X CEOs NPM library page where we can

01:24.240 --> 01:29.520
view all sorts of information about it including the documentation which we have down below here you

01:29.520 --> 01:31.050
can see some things that look familiar.

01:31.050 --> 01:36.840
We have calls to then and catch just like we do when we use premises outside of axioms.

01:36.840 --> 01:41.760
Over on the right hand side you can see this is a super popular library and the most recent version

01:41.760 --> 01:44.280
is zero point 1 3.1.

01:44.400 --> 01:46.650
That's the exact version we're going to be using.

01:46.710 --> 01:50.270
Feel free to come back to this page when you use x Yeo's in your projects.

01:50.290 --> 01:53.190
It is a lot of really good examples and documentation.

01:53.190 --> 01:56.490
For now though we can install it back inside of the terminal.

01:56.490 --> 02:03.790
I'm going to be running NPM install the library name is X-posts and I am going to specify the version

02:03.850 --> 02:07.290
0.1 3.1 with the Save flag.

02:07.300 --> 02:09.530
Updating the package that Chaisson file.

02:09.730 --> 02:15.010
Now I can go ahead and run the install command which is going to install an over inside of our app promis

02:15.040 --> 02:19.270
file we can get started by loading in X he shows up at the top.

02:19.270 --> 02:26.940
I'm going to make a constant called X-posts setting equal to require axis just like this.

02:26.950 --> 02:28.060
Excellent.

02:28.060 --> 02:32.010
Now that we have this in place we can actually start making the calls down below.

02:32.140 --> 02:36.670
And this is going to involve us pulling out some of the functionality from the geocoder and whether

02:36.670 --> 02:37.360
file.

02:37.480 --> 02:42.720
So what I'm going to do is close all of my files except app promise I'm gonna open up geocoder J.S.

02:42.920 --> 02:44.670
and then I'm going to open up whether data.

02:44.710 --> 02:49.600
Us because we are going to be pulling some of the code from here things like the u r l and some of the

02:49.600 --> 02:54.150
error handling techniques although we talk about the differences as they come up.

02:54.190 --> 02:59.670
The first thing we need to do is encode the address and get that G.O. code you are out.

02:59.770 --> 03:02.220
Now this stuff happens inside of geocoder.

03:02.260 --> 03:02.800
Yes.

03:02.950 --> 03:05.310
So what I'm going to do is actually copy this line.

03:05.320 --> 03:06.140
Exactly.

03:07.040 --> 03:12.540
Where we create the encoded address and paste it over here Double-O the are the variable.

03:12.560 --> 03:14.160
Now we do need to tweak this a little bit.

03:14.180 --> 03:15.410
The address doesn't exist.

03:15.410 --> 03:19.350
What we have is are the ADOT address perfect.

03:19.410 --> 03:20.970
And now we have the encoded address.

03:21.020 --> 03:24.740
The next thing we need to get before we can start using Access is that you are out.

03:24.740 --> 03:26.830
We want to make the request too.

03:26.930 --> 03:30.950
I'm going to grab that over from the geocoder japes file as well.

03:30.950 --> 03:34.740
I'm going to take the R L from the opening ticket to the closing.

03:35.000 --> 03:38.730
Copy and paste it over an app promise Dutch Yes.

03:38.890 --> 03:43.230
Hear what I'm going to do is make a new variable called G.O. code.

03:43.230 --> 03:47.640
You are l sending an equal to what I copied over from the other file.

03:47.640 --> 03:53.040
Now we do use the encoded address variable inside of here and that's fine because it does exist right

03:53.040 --> 03:53.640
here.

03:53.640 --> 03:59.220
So at this point we have our G.O. code you r l and we can get started making our very first X-post request.

03:59.210 --> 04:05.400
In this case we're going to be taking the address and getting the Vita tude and long into to make our

04:05.400 --> 04:06.720
request down below.

04:06.720 --> 04:10.870
We're going to call a method available on X-ers X-posts dot.

04:11.010 --> 04:17.380
Get get is the method that lets us make our HTP get request which is exactly what we want to do here.

04:17.490 --> 04:20.740
And it's really simple to set up when you're expecting Jason data.

04:20.790 --> 04:29.250
All you have to do is pass in the U R L which we have in the geocoding u r l variable.

04:29.290 --> 04:34.580
There's no need to provide any other options like a option letting it know it's Jason X-post knows how

04:34.580 --> 04:41.270
to automatically parse our Jason data and what get returns is actually a promise which means we can

04:41.270 --> 04:47.630
use dot and then in order to run some code when the promise gets fulfilled or rejected whether things

04:47.630 --> 04:53.420
go well or things go poorly inside of then I'm going to go ahead and provide one function for the moment.

04:53.420 --> 04:59.300
This is going to be the success case the success case is going to get called with one argument which

04:59.300 --> 05:04.950
the X-ers library recommends you call response although technically you could call it anything you like.

05:04.970 --> 05:09.470
Now here we're going to get access to all of the same information we got inside of the request library

05:09.710 --> 05:11.080
things like our headers.

05:11.150 --> 05:16.210
Things like response and request headers as well as the body information all sorts of useful info.

05:16.340 --> 05:20.850
What we really need though is the response dot data property.

05:21.050 --> 05:29.850
I'm going to go ahead and print that using console dot Lague console dialog response dot data and now

05:29.850 --> 05:35.070
that we have this in place we can go ahead and run our app promis file passing in a valid address and

05:35.070 --> 05:40.050
we can see what happens when we make that request over inside of the command line.

05:40.200 --> 05:43.160
I'm going to use clear to clear the terminal output.

05:43.170 --> 05:47.080
Then I'm going to run node app HIF and promise.

05:47.360 --> 05:51.330
Jay asks passing in an address I'm going to use a valid address.

05:51.360 --> 05:55.240
I'll go ahead and use 1301 Lombard Street.

05:56.750 --> 05:59.890
Philadelphia perfect.

05:59.940 --> 06:01.680
The request goes out and what do we get back.

06:01.680 --> 06:06.740
We get back the results object exactly as we saw it when we used the other module.

06:06.750 --> 06:11.520
The only difference in this case is that we're using promises built in instead of having to wrap it

06:11.520 --> 06:13.500
in promises or using callbacks.

06:13.500 --> 06:15.380
And this is really fantastic.

06:15.390 --> 06:21.480
Now aside from this success handler we can also add a call to catch which is going to let us catch all

06:21.480 --> 06:23.310
of the errors that might occur.

06:23.340 --> 06:27.450
We're going to get the air object as the one and only argument and then we can do something with that

06:27.450 --> 06:29.930
air object inside of here.

06:29.940 --> 06:34.130
I'm going to kick things off by using council dot log to print the error argument.

06:34.270 --> 06:38.790
And now we can go ahead and simulate an error by removing the dot and we can see what happens when we

06:38.790 --> 06:40.530
run the program.

06:40.650 --> 06:43.520
Now I'm doing this to explore the Acciona library.

06:43.590 --> 06:47.940
I know exactly what's going to happen that's not why I'm doing it I'm doing it to show you how you should

06:47.940 --> 06:52.440
approach new libraries when you get a new library you want to play around with all the different ways

06:52.440 --> 06:56.990
it works what exactly comes back in that era argument when we have a request that fails.

06:57.090 --> 06:58.820
That's important information to know.

06:58.890 --> 07:03.370
So when you go ahead and write a real world app you can add the appropriate error handling code.

07:03.570 --> 07:07.610
In this case if I rerun the exact same command we're going to get an error.

07:07.710 --> 07:10.480
And as you can see there really is nothing to predict here.

07:10.560 --> 07:16.310
We have a lot of very cryptic error codes and even the error message property which usually contains

07:16.310 --> 07:19.720
something good does not get address info.

07:19.720 --> 07:25.750
Then we have an error code followed by the U R L but we want to do instead is print a plain text English

07:25.800 --> 07:26.670
message.

07:26.670 --> 07:31.050
To do this we're going to use an if statement checking what the code property is.

07:31.050 --> 07:36.360
This is the error code and in this case enough found we know it means it could not connect to the server

07:37.780 --> 07:39.390
down inside of the air handler.

07:39.460 --> 07:49.950
We can add this by having if and checking the condition if the DOT code equals the not found in upper

07:49.950 --> 07:54.970
case if that is the case we're going to print some sort of custom message to the screen using console

07:54.970 --> 08:03.470
that Lague console dialog unable to connect to API servers.

08:03.550 --> 08:04.580
Excellent.

08:04.600 --> 08:10.000
Now we have an air handler that handles this specific case so we can go ahead and remove our call to

08:10.000 --> 08:11.490
cancel the log.

08:11.770 --> 08:16.480
Now if we save the file and rerun things from the terminal we should get a much nicer error message

08:16.480 --> 08:17.350
printing to the screen.

08:17.350 --> 08:18.590
That's exactly what we get.

08:18.700 --> 08:21.670
Unable to connect to API servers.

08:21.760 --> 08:26.980
Now I'm going to add that back in so things start working and we can worry about the response that comes

08:26.980 --> 08:27.850
back.

08:27.930 --> 08:32.310
And as you remember inside of the geocoder file there was some things we needed to do.

08:32.320 --> 08:35.440
We've already handled this error but there is still another error.

08:35.560 --> 08:42.010
If the Bobby status property equals zero results we want to do something we want to print an error message

08:42.460 --> 08:43.150
to do that.

08:43.240 --> 08:47.670
But we're going to do inside of app promise is create our very own error.

08:47.710 --> 08:53.350
We're going to throw an error inside of this function that error is going to cause all of the code after

08:53.350 --> 08:54.730
it to not run.

08:54.730 --> 08:58.440
And it is going to move right into the air handler down below.

08:58.450 --> 09:03.340
Now we only want to throw an error if the status property is set to zero results.

09:03.460 --> 09:14.220
We're going to add an if statement at the very top to check if response dot data dot status equals in

09:14.220 --> 09:16.990
upper case zero underscore results.

09:17.160 --> 09:21.950
If that is the case then things went bad and we do not want to move on to make their request.

09:21.960 --> 09:27.750
We want to run our cash code down below to throw a new error that our promise can catch.

09:27.750 --> 09:32.190
We're going to use a syntax called throw new error.

09:32.310 --> 09:36.250
This creates and throws an error letting node know that something went wrong.

09:36.240 --> 09:43.440
We can provide our own error message something that's readable to a user unable to find that address

09:43.500 --> 09:45.140
should get the job done.

09:45.190 --> 09:48.440
And this is a message that's going to let the user know exactly what went wrong.

09:48.930 --> 09:53.610
Now in this era gets around the same code is going to run down below and Currently we only have an IF

09:53.610 --> 09:56.760
condition that checks if the code property is enough found.

09:56.910 --> 10:02.490
Well we're going to do is add an else clause inside of here we can print the error message which is

10:02.490 --> 10:09.170
the string we typed up above using the message property console dialog.

10:09.240 --> 10:15.920
The DOT message if the error code is not enough found will simply print the message to the screen.

10:16.170 --> 10:18.060
This is going to happen if we get zero results.

10:18.060 --> 10:22.890
So let's go ahead and simulate that to make sure the code works over in the terminal.

10:22.890 --> 10:29.210
I'm going to go ahead and rerun it passing in a zip code at first I'm going to use a valid zip code

10:29.280 --> 10:37.490
0 8 8 2 2 and I should get my data back and I do then I'm going to use an invalid one is 0 0 0 0 0 when

10:37.490 --> 10:38.380
I run this request.

10:38.390 --> 10:39.520
I do get my error.

10:39.560 --> 10:46.000
Unable to find that address by calling throw new error we're immediately stopping the execution of this

10:46.010 --> 10:46.450
function.

10:46.460 --> 10:50.090
So the council laid down below never prints which is exactly what we want.

10:50.240 --> 10:53.420
We move right on to the error code below.

10:53.520 --> 10:57.980
Now that we have our air handler in place we can go ahead and start generating that whether you are

10:57.990 --> 11:00.550
l in order to generate that you are out.

11:00.560 --> 11:06.860
I'm going to go ahead and copy that you are from the weather file taking it with the ticks in place

11:07.070 --> 11:10.230
and moving it over into the app promise file.

11:10.330 --> 11:16.900
I'm going to make a new variable called Whether you are all setting it equal to exactly what we copied.

11:16.940 --> 11:22.330
Now whether you are does need a few pieces of information we need that latitude and longitude.

11:22.340 --> 11:24.050
We have two variables lat and long.

11:24.050 --> 11:25.250
So let's go ahead and create them.

11:25.250 --> 11:32.410
Just above getting the appropriate value from that response object var and var log.

11:32.720 --> 11:34.010
Excellent.

11:34.010 --> 11:37.730
Now in order to pull them off we have to go through that process of digging into the object.

11:37.730 --> 11:39.190
We've done it before.

11:39.290 --> 11:45.050
We're going to be looking in the response object at the data property which is similar to the body in

11:45.050 --> 11:46.200
the other library.

11:46.400 --> 11:54.650
Then we're going to go into results grabbing the first item accessing the geometry property then we're

11:54.650 --> 11:57.550
going to access location dot latt.

11:57.710 --> 12:03.770
Now we can copy what we just typed create an equal sign for the long tattoo'd variable and paste it

12:03.770 --> 12:06.250
here replacing lat with L and G.

12:06.290 --> 12:08.990
And now we have our lat long variables.

12:09.050 --> 12:13.040
Now before we go ahead and make that weather request I do want to print the formatted address because

12:13.040 --> 12:15.570
that's something the previous app did as well.

12:15.590 --> 12:20.870
I'm going to take our consulate log down below and instead of printing response data I'm going to dive

12:20.870 --> 12:24.160
into the data object getting the formatted address.

12:24.230 --> 12:26.270
This is also on the results arrays.

12:26.270 --> 12:32.840
First item and we're going to be accessing the property formatted underscore address perfect.

12:33.110 --> 12:37.670
Now that we have our formatted address printing to the screen we can go ahead and make our second call

12:37.760 --> 12:39.530
by returning a new promise.

12:39.590 --> 12:42.160
This is going to let us chain these calls together.

12:42.380 --> 12:49.710
We're going to return a call to Acciona dot get passing in the RL would justify that.

12:49.710 --> 12:52.520
It is whether you are l.

12:53.160 --> 12:57.510
Now that we have this call returning would you go ahead and attach another then call right between our

12:57.510 --> 13:05.100
previous then call and catch by calling then passing in one function just like this.

13:05.110 --> 13:08.210
This function is going to get called when the weather data comes back.

13:08.260 --> 13:13.320
We're going to get that same response argument because we're using the same method ASIO's don't get

13:13.750 --> 13:14.810
in out of here.

13:14.810 --> 13:19.080
We don't have to worry about throwing any errors since we never needed to access abody property in order

13:19.080 --> 13:21.610
to check if something went wrong with the weather request.

13:21.630 --> 13:28.050
If this callback runs then things went right and we can go ahead and print the weather information in

13:28.050 --> 13:34.020
order to get that done we're going to make two variables one called temperature.

13:34.110 --> 13:39.440
This is going to get set equal to response dot data.

13:39.500 --> 13:45.760
Then we're going to access that currently property then we're going to access temperature and we're

13:45.760 --> 13:50.830
going to pull out a second variable the actual temperature or apparent temperature which is the property

13:50.890 --> 13:56.950
name of our apparent temperature.

13:57.010 --> 14:01.580
We're going to be setting this equal to response data.

14:01.750 --> 14:04.790
Currently not apparent temperature

14:08.600 --> 14:13.340
now that we have heard two things pulled out into variables we can go ahead and add those things inside

14:13.400 --> 14:14.740
of a call the council land.

14:15.080 --> 14:19.790
I chose to define two variables so I didn't have to add these two really long property statements to

14:19.790 --> 14:20.720
the council log.

14:20.840 --> 14:24.950
I can simply reference the variables console like.

14:25.180 --> 14:30.940
And we're going to be using template strings here so we can inject those two values inside of quotes.

14:30.970 --> 14:38.610
It's currently followed by the temperature I'm going to inject that right here.

14:38.690 --> 14:40.110
Then I can add a period.

14:40.250 --> 14:44.330
It feels like followed by the apparent temperature.

14:44.460 --> 14:46.230
I'm going to inject that right here.

14:50.480 --> 14:56.130
Now that we have our string printing to the screen we can go ahead and test that our app works as expected.

14:56.180 --> 15:00.790
I'm going to save the file and over inside of the terminal I'm going to go ahead and rerun the command

15:00.830 --> 15:03.870
two commands ago where I had a valid zip code.

15:04.040 --> 15:09.230
When I run this we do get the weather info for Flemington New Jersey it's currently 84 degrees but it

15:09.290 --> 15:10.820
feels like 90.

15:10.820 --> 15:16.070
If I go ahead and run something that has a bad address I do get the error message so everything looks

15:16.070 --> 15:16.880
great.

15:16.880 --> 15:21.640
I'm going to test it out with one more zip code my current zip code 1 9 1 4 6.

15:21.740 --> 15:26.870
When I run it I get the appropriate address and I get the weather info printing it to the screen.

15:26.870 --> 15:28.670
And this is fantastic.

15:28.820 --> 15:34.670
By using the Acciona library we're able to change promises like this without needing to do anything

15:34.670 --> 15:35.690
too crazy.

15:35.690 --> 15:40.520
The Acciona get method returns or promise so we can access it directly using then.

15:40.680 --> 15:44.800
Here we use then once to do something with that geo location data.

15:44.900 --> 15:49.700
We print the address to the screen then we return another promise where we make the request for the

15:49.700 --> 15:51.510
weather inside of here.

15:51.500 --> 15:56.900
Our second then call we go ahead and print the weather to the screen and we also add in a catch call

15:57.050 --> 16:02.480
which is going to handle any errors if anything goes wrong with either of our promises or if we throw

16:02.480 --> 16:07.770
an error like we do here catch is going to get fired printing the messages to the screen.

16:07.850 --> 16:13.690
And this is all it takes to use X-post and set up promises for your HTP requests.

16:13.700 --> 16:19.370
Now one reason people love promises over traditional callbacks is that instead of nesting you can simply

16:19.370 --> 16:19.930
chain.

16:20.090 --> 16:23.830
So your code doesn't get indented to crazy levels as we saw in app.

16:23.900 --> 16:29.810
Yes we went a few indentation levels deep just to add to calls together if we needed to add a third.

16:29.810 --> 16:35.060
It would have gotten even worse with promises we can keep everything at the same level keeping our code

16:35.090 --> 16:37.430
a lot easier to maintain.

16:37.520 --> 16:42.030
And now that you know a little bit about promises we are done with the async section.

16:42.110 --> 16:47.630
Obviously we're not done with a sync every single thing we do throughout the rest of the sections in

16:47.630 --> 16:52.460
this course is going to be a sink in the next section we're going to start creating web servers which

16:52.460 --> 16:59.240
will be a saying will make API which will be a sink and will create real time socket apps which will

16:59.240 --> 17:00.360
be a sync.

17:00.410 --> 17:02.210
It is a critical part to node.

17:02.290 --> 17:07.940
J.S. all we've done here is we've gone over the very basics of callbacks and promises we've gone through

17:07.940 --> 17:13.070
a few examples creating a pretty cool weather app but now it's time to move on to creating node apps

17:13.070 --> 17:19.220
that we deploy to servers and those servers are accessible via anybody with a web connection that is

17:19.220 --> 17:20.570
coming up in the next section.

17:20.600 --> 17:23.230
I am super super excited to get there.

17:23.270 --> 17:24.410
So stay tuned.

17:24.440 --> 17:25.960
I will see you then.
