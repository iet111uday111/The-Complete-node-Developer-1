WEBVTT

00:00.390 --> 00:05.050
In the last video you learn how to use require to load in modules that come with notes.

00:05.150 --> 00:05.720
Yes.

00:05.790 --> 00:10.710
In this video you are going to learn how to use required to load and other files that you created inside

00:10.710 --> 00:11.720
of your project.

00:11.730 --> 00:17.580
This is going to let you move functions outside of apps that drive us into more specific files which

00:17.580 --> 00:22.150
is going to make your application easier to scale easier to task and easier to update.

00:23.050 --> 00:26.860
To get started the first thing we're going to do is make that new file.

00:26.980 --> 00:31.960
Now in the context of our notes app the new file is going to store various functions for writing and

00:31.960 --> 00:34.030
reading notes for the moment.

00:34.030 --> 00:37.900
We're not going to be worrying about that functionality but we are going to create the file where it

00:37.900 --> 00:39.270
will eventually live.

00:39.280 --> 00:44.740
This file is going to be notes dodgiest and we're going to save it inside of the root of our application

00:44.920 --> 00:46.070
right alongside apt.

00:46.080 --> 00:48.880
Jay Yes and greetings Don TXI T.

00:49.150 --> 00:55.150
For the moment all we're going to do inside of notes is use console dialog to print a little log showing

00:55.150 --> 01:02.600
the file has been executed starting notes Dhananjay us perfect.

01:02.630 --> 01:06.240
Now we have a log on the top of notes and one on the top of app.

01:06.290 --> 01:07.690
I'm going to change that to app.

01:08.030 --> 01:08.730
Yes.

01:08.780 --> 01:09.370
Awesome.

01:10.180 --> 01:13.390
With this in place we can now require the notes file.

01:13.420 --> 01:18.560
It doesn't export any functionality but that's fine by the way when I say export.

01:18.730 --> 01:20.840
I mean the notes file.

01:20.950 --> 01:25.320
It doesn't have any functions or properties that another file can take advantage of.

01:25.360 --> 01:28.690
We'll look at how to export stuff in just a second.

01:28.690 --> 01:34.820
For now though we're going to load our module in much the same way we loaded in the built in node modules.

01:34.840 --> 01:37.260
Let's go ahead and make a contest.

01:37.310 --> 01:42.330
I'm going to call this one it notes and we're going to set it equal to the return result from require

01:42.360 --> 01:44.950
just like we've done up above inside of here.

01:45.020 --> 01:47.740
We are going to pass in one argument that's going to be a string.

01:47.870 --> 01:50.300
But it is going to be a little different in the past.

01:50.300 --> 01:55.530
We typed in the module name of what we have here is not a module we have a file notes.

01:55.670 --> 02:00.830
Yes but we need to do is tell a node where that file lives using a relative path.

02:00.920 --> 02:06.320
Now relative paths start with a dot forward slash which points to the current directory that the file

02:06.320 --> 02:07.020
is in.

02:07.040 --> 02:12.340
In this case this points us to the app JSE directory which is the root of our project from here.

02:12.440 --> 02:15.300
We don't have to go into any other folders to access notes.

02:15.340 --> 02:17.360
J.S. it's sitting right here.

02:17.480 --> 02:21.570
So you can type its name with this in place we can now save apt.

02:21.610 --> 02:25.120
Yes and see what happens when we run our application.

02:25.240 --> 02:32.530
I'm going to go ahead and run the app using node app Jap's and right here you see we get our two locks.

02:32.540 --> 02:34.520
First we get starting apparat.

02:34.590 --> 02:36.570
And then we get starting notes.

02:36.660 --> 02:43.430
Yes now starting notes that J.S. comes from here and it only runs because we required the file inside

02:43.430 --> 02:44.060
of Aptor.

02:44.150 --> 02:45.080
Yes.

02:45.080 --> 02:51.080
If I comment out this line save the file and rerun it from the terminal you can see the notes file never

02:51.080 --> 02:54.170
executes because we never explicitly touch it.

02:54.170 --> 02:59.330
We never call it inside of the terminal like we do here and we never require.

02:59.420 --> 03:01.720
For now though we are going to be requiring it.

03:02.090 --> 03:06.080
So I'm going to comment that line by the way I'm using command.

03:06.080 --> 03:09.900
Forward slash to comment and and comment lines quickly.

03:09.920 --> 03:13.690
This is a keyboard shortcut available in most text editors.

03:13.700 --> 03:16.100
If you're on Windows or Linux it might not be command.

03:16.100 --> 03:18.010
It might be control or something else.

03:18.080 --> 03:22.670
Go ahead and just click around on there and try to find the one that works with forward slash just to

03:22.670 --> 03:27.800
the left of the shift key to comment and on comment lines that's going to save you a lot of time down

03:27.800 --> 03:28.340
the line.

03:28.340 --> 03:33.260
I'm a big fan of keyboard shortcuts and I'll try to explain as many of them as I can if I'm using one

03:33.260 --> 03:34.280
that I haven't explained.

03:34.280 --> 03:35.240
And you're curious.

03:35.240 --> 03:37.050
Please just ask in the Q&amp;A.

03:37.100 --> 03:39.610
I'd be happy to tell you exactly how it's done.

03:40.500 --> 03:46.090
For now though the focus is going to be to export something from notes dodgiest that we can use in app.

03:46.140 --> 03:49.060
J.S. inside of notes.

03:49.160 --> 03:49.660
Yes.

03:49.890 --> 03:56.740
Actually inside of all of our node files we have access to a variable called module I'm going to use

03:56.740 --> 04:02.980
console log to print it to the screen so we can explore it over in the terminal module just like this

04:02.980 --> 04:05.640
is available in all of our files.

04:05.650 --> 04:08.710
Let's go ahead and rerun the file to explore it right here.

04:08.740 --> 04:11.130
We got a pretty big object now.

04:11.170 --> 04:13.740
Truth be told we're not going to be using most of these properties.

04:13.750 --> 04:19.540
We have things like ID exports parent file name and a bunch more if the only one we're ever going to

04:19.540 --> 04:21.810
use in this course is exports.

04:21.820 --> 04:24.560
This is pretty much the only useful one here.

04:24.760 --> 04:26.530
Exports is fantastic.

04:26.560 --> 04:30.760
It's an object on the module property and everything on this object.

04:30.790 --> 04:36.740
This gets exported this object gets set as the variable right here.

04:36.860 --> 04:42.250
Notice that means we can set properties on it and those will get set on notes and we can use them inside

04:42.250 --> 04:42.880
of apps.

04:42.940 --> 04:46.040
Yes let's take a quick look at how that works.

04:47.290 --> 04:54.380
Well we're going to do is define an age property using module dot exports the object we just explored

04:54.390 --> 04:55.570
over in the terminal.

04:55.770 --> 04:58.290
And we know it's an object because we can see it right here.

04:58.500 --> 05:05.190
Which means I can at a property age and set it equal to my age which is 25 then I can go ahead and save

05:05.190 --> 05:09.420
this file and move into Aptos to take advantage of this new age property.

05:10.400 --> 05:16.960
Notes is going to be storing all of my exports in this case just age right here after the greeting.

05:17.180 --> 05:23.940
I'm going to say you are followed by the age inside of template strings we use dollar with curly braces

05:25.320 --> 05:29.630
notes dot age and I'll put a period at the end.

05:29.700 --> 05:32.130
And now our greeting should say Hello Andrew.

05:32.130 --> 05:34.010
You are twenty five.

05:34.200 --> 05:38.200
It's getting the 25 from our separate file which is fantastic.

05:38.200 --> 05:40.240
Let's take a quick moment to rerun the program.

05:40.240 --> 05:45.970
Over inside of the terminal using the up arrow key and the Enter key back inside of the app we can open.

05:45.970 --> 05:47.300
Greetings don t s t.

05:47.380 --> 05:49.410
And sitting right here you see we have hello.

05:49.410 --> 05:52.650
Andrew you are 25 which is awesome.

05:52.840 --> 05:58.570
Using require we were able to require a file that we created and this file stored some properties that

05:58.570 --> 06:00.880
were advantageous to the rest of the project.

06:00.880 --> 06:04.270
Now obviously this is a pretty contrived example.

06:04.270 --> 06:06.570
We're not going to be exporting static numbers.

06:06.580 --> 06:11.920
The real goal of exports is to be able to export functions that get used inside of app.

06:12.090 --> 06:14.190
Yes let's take a quick moment.

06:14.200 --> 06:15.760
Export two functions

06:18.650 --> 06:20.990
right here I'm going to set module.

06:21.080 --> 06:23.180
Exports dot add.

06:23.210 --> 06:27.730
Note equal to a function function.

06:28.740 --> 06:33.100
Followed by opening and closing parentheses followed by the curly braces.

06:33.120 --> 06:38.460
Now throughout the course I'm going to be using aero functions where I can like right here to convert

06:38.490 --> 06:41.320
a regular S-5 function into an era function.

06:41.340 --> 06:49.620
All you do is you remove the function keyword and replace it with a equals greater then sign right between

06:49.620 --> 06:52.620
the parentheses end of the opening curly braces.

06:52.620 --> 06:56.610
Now there are some more subtleties to aero functions we'll be talking about throughout the course but

06:56.610 --> 07:01.110
if you have an anonymous function you can swap it to an arrow function without any problems.

07:01.110 --> 07:06.650
The big difference is that the function is not going to bind the this keyword or the arguments array

07:06.840 --> 07:08.560
which will be exploring throughout the course.

07:08.580 --> 07:13.900
So if you do get some errors it's good to know that the error function could be the cause.

07:13.950 --> 07:18.390
For now though we're going to keep things really simple using console log to print add.

07:18.390 --> 07:19.180
Note.

07:19.470 --> 07:24.570
This is going to let us know that the ADD note function was called and we're going to go ahead and return

07:25.470 --> 07:29.630
some string like new note.

07:29.650 --> 07:34.000
Now this function is going to find in notes dodgiest but we can take advantage of it over inside of

07:34.030 --> 07:34.670
app.

07:34.800 --> 07:41.740
Yes let's take a quick second to comment out both the append file and the user line.

07:41.800 --> 07:44.650
I can highlight both and use that keyboard shortcut.

07:44.650 --> 07:48.210
We talked about to comment both of them out and right here.

07:48.430 --> 07:55.390
All I'm going to do is make a variable call the result or yes for short and set it equal to the return

07:55.390 --> 07:57.560
result from notes dot.

07:57.610 --> 08:02.270
Add note now the add function is a dummy function for the moment.

08:02.320 --> 08:05.650
It doesn't take any arguments and it doesn't actually do anything.

08:05.830 --> 08:07.690
So we can call it without any arguments.

08:07.690 --> 08:14.620
Then we're going to print the result variable like this and we would expect the result variable to be

08:14.620 --> 08:15.530
equal to that string.

08:15.550 --> 08:16.240
New in.

08:16.480 --> 08:22.720
If I save both of my files and rerun things from the terminal right here you can see new note prints

08:22.720 --> 08:26.430
to the screen at the very end and just before it add no prints.

08:26.440 --> 08:29.520
This means that we required successfully our notes file.

08:29.590 --> 08:33.830
We called add no and its return result was successfully returned to app..

08:33.870 --> 08:34.410
J.S..

08:34.510 --> 08:36.140
Which is fantastic.

08:36.220 --> 08:40.690
Using this exact pattern we're going to be able to define our functions for adding and removing notes

08:40.720 --> 08:47.020
over here in our notes file but we'll be able to call them anywhere inside of our app including in app

08:47.050 --> 08:50.140
dot J as.

08:50.260 --> 08:52.790
Now it's time for a quick challenge.

08:52.810 --> 08:55.480
What I'd like you to do is make a new function in notes.

08:55.530 --> 09:02.440
J.S. called add this add function is going to get set on the exports object and remember it's an object

09:02.440 --> 09:04.690
so you can set multiple properties.

09:04.690 --> 09:08.160
This add function is going to take two arguments A and B.

09:08.260 --> 09:10.970
It's going to add them together and return the result.

09:11.080 --> 09:12.670
Then over inside of x.

09:12.770 --> 09:17.380
Yes I'd like you to call that notes add function passing in two numbers whatever you like.

09:17.380 --> 09:19.420
Like 9 Ninan negative 2.

09:19.540 --> 09:23.390
Then print the result to the screen and make sure it works correctly.

09:23.740 --> 09:28.430
I can get started by removing the call to add notes since this is not going to be needed for the challenge.

09:28.480 --> 09:31.920
So take a moment create that add function inside of notes.

09:32.050 --> 09:32.670
J.

09:32.760 --> 09:37.600
Call it inside of apt g s and make sure the proper result prints to the screen.

09:37.600 --> 09:38.770
Take a moment pause the video.

09:38.770 --> 09:40.920
Knock that out and when you're done click play

09:44.090 --> 09:44.900
how'd it go.

09:45.100 --> 09:48.660
Hopefully you were able to make that function and call it from app dot.

09:48.720 --> 09:53.190
Yes the first step in the process is going to be to define the new function.

09:53.530 --> 09:59.450
Right here I'm going to set module dot exports dot add equal to that function.

10:00.680 --> 10:02.870
Let's set it equal to an arrow function.

10:02.900 --> 10:08.540
If you used a regular function that is perfectly fine I just prefer using the arrow function when I

10:08.540 --> 10:12.800
can and inside of here we are going to be getting into arguments.

10:12.890 --> 10:15.920
Going to be getting a and b.

10:15.920 --> 10:19.100
All we need to do is return the result really simple.

10:19.160 --> 10:23.480
We're going to return a plus b just like this.

10:23.480 --> 10:25.010
Now this was the first part of your challenge.

10:25.040 --> 10:31.460
Defining a utility function in notes dodgiest the second part was to actually use it over an app.

10:31.640 --> 10:37.400
Yes right here we can use our function by printing Konsole dot log.

10:38.560 --> 10:41.170
Result with the colon.

10:41.260 --> 10:44.710
And this is just for formatting and that's the second argument we're going to print.

10:44.710 --> 10:48.860
The actual result notes dot add.

10:49.090 --> 10:50.950
And we're going to add up to numbers.

10:50.950 --> 10:55.150
Let's go ahead and add 9 and negative to the result.

10:55.150 --> 10:56.540
Here should be 7.

10:56.560 --> 11:03.600
If we go ahead and run the program you can see we get just that 7 prints to the screen.

11:03.600 --> 11:08.670
If you are able to get this Congratulations you successfully completed one of your first challenges.

11:08.670 --> 11:13.290
These are going to be sprinkled throughout the course and they're going to get progressively more complex

11:13.590 --> 11:14.390
in the beginning.

11:14.400 --> 11:19.350
I'm going to lead you through the process not leaving too much open ended later in the course though

11:19.380 --> 11:25.110
it's going to be really important to your own learning to have a lot of time to explore different ways

11:25.110 --> 11:25.680
to do things.

11:25.680 --> 11:30.340
This means the problems will be a little more open ended as will the solutions.

11:30.360 --> 11:33.670
Don't worry for now we're going to keep the challenges pretty explicit.

11:33.690 --> 11:37.120
I'll tell you exactly what I want and exactly how I want it done.

11:37.410 --> 11:39.900
Now you can go ahead and play around with different ways to do it.

11:39.900 --> 11:41.370
That is perfectly fine.

11:41.370 --> 11:46.470
The real goal is to just get you writing code independent of following someone else's lead.

11:46.480 --> 11:50.080
That is where the real learning happens and that is it for this one.

11:50.100 --> 11:56.220
We now know how to require other files that we created and we know how to export things like properties

11:56.250 --> 11:58.410
and functions from those files.

11:58.410 --> 12:02.650
This makes the module system inside of node super useful.

12:02.670 --> 12:05.240
Now there really is only one more piece to the puzzle.

12:05.250 --> 12:11.540
We explored how to use built in modules we explored how to use modules we have to find in the next video

12:11.550 --> 12:15.220
we are going to explore how to use third party modules from there.

12:15.310 --> 12:19.050
We're going to start building the notes application so stay tuned.

12:19.140 --> 12:20.840
I will see you next time.
